"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function _createClass(t,e,i){return e&&_defineProperties(t.prototype,e),i&&_defineProperties(t,i),t}function _createSuper(t){return function(){var e,i=_getPrototypeOf(t);if(_isNativeReflectConstruct()){var r=_getPrototypeOf(this).constructor;e=Reflect.construct(i,arguments,r)}else e=i.apply(this,arguments);return _possibleConstructorReturn(this,e)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var canvas=document.querySelector("canvas"),ctx=canvas.getContext("2d"),width=canvas.width=window.innerWidth,height=canvas.height=window.innerHeight;function random(t,e){return Math.floor(Math.random()*(e-t)+t)}var Shape=function t(e,i,r,n,o){_classCallCheck(this,t),this.x=e,this.y=i,this.velX=r,this.velY=n,this.exists=o},Ball=function(t){_inherits(i,Shape);var e=_createSuper(i);function i(t,r,n,o,s,l,a){var c;return _classCallCheck(this,i),(c=e.call(this,t,r,n,o,a)).color=s,c.size=l,c}return _createClass(i,[{key:"draw",value:function(){ctx.beginPath(),ctx.fillStyle=this.color,ctx.arc(this.x,this.y,this.size,0,2*Math.PI),ctx.fill()}},{key:"update",value:function(){(this.x+this.size>=width||this.x-this.size<=0)&&(this.velX=-this.velX),(this.y+this.size>=height||this.y-this.size<=0)&&(this.velY=-this.velY),this.x+=this.velX,this.y+=this.velY}},{key:"collisionDetect",value:function(){for(var t=0;t<balls.length;t++)if(this!==balls[t]){var e=this.x-balls[t].x,i=this.y-balls[t].y;Math.sqrt(e*e+i*i)<this.size+balls[t].size&&(balls[t].color=this.color="rgb("+random(0,255)+","+random(0,255)+","+random(0,255)+")")}}}]),i}();Ball.count=20;var EvilCircle=function(t){_inherits(i,Shape);var e=_createSuper(i);function i(t,r,n){var o;return _classCallCheck(this,i),(o=e.call(this,t,r,20,20,n)).color="White",o.size=10,o}return _createClass(i,[{key:"draw",value:function(){ctx.beginPath(),ctx.lineWidth=3,ctx.strokeStyle=this.color,ctx.arc(this.x,this.y,this.size,0,2*Math.PI),ctx.stroke()}},{key:"checkBounds",value:function(){this.x+this.size>=width?this.x=width-this.velX:this.x-this.size<=0&&(this.x=0+this.velX),this.y+this.size>=height?this.y=height:this.y-this.size<=0&&(this.y=0)}},{key:"setControls",value:function(){var t=this;window.onkeydown=function(e){65===e.keyCode?t.x-=t.velX:68===e.keyCode?t.x+=t.velX:87==e.keyCode?t.y-=t.velY:83===e.keyCode&&(t.y+=t.velY)}}},{key:"collisionDetect",value:function(){for(var t=0;t<balls.length;t++){var e=this.x-balls[t].x,i=this.y-balls[t].y;Math.sqrt(e*e+i*i)<this.size+balls[t].size&&!0===balls[t].exists&&(balls[t].exists=!1,Ball.count--,paragraph[0].textContent="".concat(textParagraph," ").concat(Ball.count))}}}]),i}(),balls=[],evilCicle=new EvilCircle(random(0,width),random(0,height),!0),paragraph=document.getElementsByTagName("p"),textParagraph=paragraph[0].textContent;function loop(){for(ctx.fillStyle="rgba(0,0,0,0.25)",ctx.fillRect(0,0,width,height);balls.length<Ball.count;){var t=new Ball(random(0,width),random(0,height),random(-7,7),random(-7,7),"rgb("+random(0,255)+","+random(0,255)+","+random(0,255)+")",random(10,20),!0);balls.push(t)}for(var e=0;e<balls.length;e++)balls[e].exists&&(balls[e].draw(),balls[e].update(),balls[e].collisionDetect()),evilCicle.draw(),evilCicle.checkBounds(),evilCicle.setControls(),evilCicle.collisionDetect();requestAnimationFrame(loop)}paragraph[0].textContent=paragraph[0].textContent+Ball.count,loop();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
