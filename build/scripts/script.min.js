"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _defineProperties(t,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}function _createClass(t,e,o){return e&&_defineProperties(t.prototype,e),o&&_defineProperties(t,o),t}function _createSuper(t){return function(){var e,o=_getPrototypeOf(t);if(_isNativeReflectConstruct()){var n=_getPrototypeOf(this).constructor;e=Reflect.construct(o,arguments,n)}else e=o.apply(this,arguments);return _possibleConstructorReturn(this,e)}}function _possibleConstructorReturn(t,e){return!e||"object"!==_typeof(e)&&"function"!=typeof e?_assertThisInitialized(t):e}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&_setPrototypeOf(t,e)}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var Shape=function t(e,o,n,i,r){_classCallCheck(this,t),this.x=e,this.y=o,this.velX=n,this.velY=i,this.exists=r},Ball=function(t){_inherits(o,Shape);var e=_createSuper(o);function o(t,n,i,r,s,l,a){var c;return _classCallCheck(this,o),(c=e.call(this,t,n,i,r,a)).color=s,c.size=l,c}return _createClass(o,[{key:"draw",value:function(){ctx.beginPath(),ctx.fillStyle=this.color,ctx.arc(this.x,this.y,this.size,0,2*Math.PI),ctx.fill()}},{key:"update",value:function(){(this.x+this.size>=width||this.x-this.size<=0)&&(this.velX=-this.velX),(this.y+this.size>=height||this.y-this.size<=0)&&(this.velY=-this.velY),this.x+=this.velX,this.y+=this.velY}},{key:"collisionDetect",value:function(){for(var t=0;t<balls.length;t++)if(this!==balls[t]&&balls[t].exists){var e=this.x-balls[t].x,o=this.y-balls[t].y;Math.sqrt(e*e+o*o)<this.size+balls[t].size&&(this.velX=-this.velX,this.velY=-this.velY)}}},{key:"mouseCollision",value:function(){for(var t=0;t<balls.length;t++){var e=this.x-mouseX,o=this.y-mouseY;Math.sqrt(e*e+o*o)<this.size&&(console.log("DistX ".concat(e," DistY ").concat(o)),console.log("MouseX ".concat(mouseX," MouseY ").concat(mouseY)),mouseX=void 0,mouseY=void 0,this.exists=!1,showCount())}}}]),o}();Ball.count=10,Ball.countBalls=function(){return balls.reduce((function(t,e){return e.exists?t+1:t+0}),0)};var width,height,mouseX,mouseY,canvas=document.querySelector("canvas"),ctx=canvas.getContext("2d");function random(t,e){return Math.floor(Math.random()*(e-t)+t)}function init(){width=canvas.width=window.innerWidth,height=canvas.height=window.innerHeight}init(),window.addEventListener("resize",init),canvas.addEventListener("mousedown",(function(t){mouseX=t.clientX,mouseY=t.clientY}));var balls=[];function loop(){for(ctx.fillStyle="rgba(0,0,0,0.25)",ctx.fillRect(0,0,width,height);balls.length<Ball.count;){var t=new Ball(random(0,width),random(0,height),random(-7,7),random(-7,7),"rgb("+random(0,255)+","+random(0,255)+","+random(0,255)+")",random(20,30),!0);balls.push(t)}for(var e=0;e<balls.length;e++)balls[e].exists&&(balls[e].draw(),balls[e].update(),balls[e].collisionDetect(),balls[e].mouseCollision());requestAnimationFrame(loop)}var paragraph=document.getElementsByTagName("p"),textParagraph=paragraph[0].textContent;function showCount(){paragraph[0].textContent=textParagraph+Ball.countBalls()}loop(),showCount();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
